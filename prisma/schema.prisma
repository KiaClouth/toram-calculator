generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model Post {
    id          Int      @id @default(autoincrement())
    name        String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    createdBy   User     @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// 以下是托拉姆的数据模型
enum Element {
    NoElement
    Light
    Dark
    Water
    Fire
    Earth
    Wind
}

model Monster {
    id                               String   @id @default(cuid())
    createdAt                        DateTime @default(now())
    updatedAt                        DateTime @updatedAt
    updatedBy                        User     @relation(fields: [updatedById], references: [id])
    updatedById                      String
    name                             String
    baseLv                           Int?
    experience                       Int?
    address                          String?  @db.TinyText
    element                          Element?
    radius                           Int?
    maxhp                            Int?
    physicalDefense                  Int?
    physicalResistance               Int?
    magicalDefense                   Int?
    magicalResistance                Int?
    criticalResistance               Int?
    avoidance                        Int?
    dodge                            Int?
    block                            Int?
    normalAttackResistanceModifier   Int?
    physicalAttackResistanceModifier Int?
    magicalAttackResistanceModifier  Int?
    difficultyOfTank                 Int?     @default(5)
    difficultyOfMelee                Int?     @default(5)
    difficultyOfRanged               Int?     @default(5)
    possibilityOfRunningAround       Int?     @default(5)
    specialBehavior                  String?  @db.TinyText

    @@index([name])
}

model Character {
    id                  String                @id @default(cuid())
    createdAt           DateTime              @default(now())
    updatedAt           DateTime              @updatedAt
    createdBy           User                  @relation(fields: [createdById], references: [id])
    createdById         String
    name                String
    baseAbi             BaseAbi[]
    mainWeapoen         MainWeapoen[]
    subWeapoen          SubWeapoen[]
    bodyArmor           BodyArmor[]
    additionalEquipment AdditionalEquipment[]
    specialEquipment    SpecialEquipment[]
}

enum MainWeaType {
    NoWea
    OneHandedSword
    TwoHandedSword
    Bow
    Staff
    MagicDevice
    Knuckle
    Halberd
    Katana
}

enum SubWeaType {
    NoWea
    OneHandedSword
    MagicDevice
    Knuckle
    Katana
    Arrow
    Dagger
    NinjutsuScroll
    Shield
}

model MainWeapoen {
    id                 String      @id @default(cuid())
    createdAt          DateTime    @default(now())
    updatedAt          DateTime    @updatedAt
    createdBy          Character   @relation(fields: [createdByCharacter], references: [id])
    createdByCharacter String
    mainWeaType        MainWeaType @default(OneHandedSword)
}

model SubWeapoen {
    id                 String     @id @default(cuid())
    createdAt          DateTime   @default(now())
    updatedAt          DateTime   @updatedAt
    createdBy          Character  @relation(fields: [createdByCharacter], references: [id])
    createdByCharacter String
    subWeaType         SubWeaType @default(NoWea)
}

model BodyArmor {
    id                 String    @id @default(cuid())
    createdAt          DateTime  @default(now())
    updatedAt          DateTime  @updatedAt
    createdBy          Character @relation(fields: [createdByCharacter], references: [id])
    createdByCharacter String
}

model AdditionalEquipment {
    id                 String    @id @default(cuid())
    createdAt          DateTime  @default(now())
    updatedAt          DateTime  @updatedAt
    createdBy          Character @relation(fields: [createdByCharacter], references: [id])
    createdByCharacter String
}

model SpecialEquipment {
    id                 String    @id @default(cuid())
    createdAt          DateTime  @default(now())
    updatedAt          DateTime  @updatedAt
    createdBy          Character @relation(fields: [createdByCharacter], references: [id])
    createdByCharacter String
}

model BaseAbi {
    id                 String    @id @default(cuid())
    createdAt          DateTime  @default(now())
    updatedAt          DateTime  @updatedAt
    createdBy          Character @relation(fields: [createdByCharacter], references: [id])
    createdByCharacter String
    baseStr            Int       @default(1)
    baseInt            Int       @default(1)
    baseVit            Int       @default(1)
    baseAgi            Int       @default(1)
    baseDex            Int       @default(1)
    baseLuc            Int       @default(0)
    baseCri            Int       @default(0)
    baseTec            Int       @default(0)
    baseMen            Int       @default(0)
}

// Next-auth的必要模型
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String      @id @default(cuid())
    name          String?
    email         String?     @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    character     Character[]
    Monster       Monster[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
